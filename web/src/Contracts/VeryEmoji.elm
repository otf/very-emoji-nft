module Contracts.VeryEmoji exposing
    ( Approval
    , ApprovalForAll
    , Transfer
    , approvalDecoder
    , approvalEvent
    , approvalForAllDecoder
    , approvalForAllEvent
    , approve
    , balanceOf
    , getApproved
    , isApprovedForAll
    , mint
    , name
    , ownerOf
    , safeTransferFrom
    , safeTransferFromWithData
    , setApprovalForAll
    , supportsInterface
    , symbol
    , tokenURI
    , transferDecoder
    , transferEvent
    , transferFrom
    )

import Eth.Abi.Decode as D exposing (abiDecode, andMap, data, toElmDecoder, topic)
import Eth.Abi.Encode as E exposing (Encoding(..), abiEncode)
import BigInt exposing (BigInt)
import Eth.Types exposing (..)
import Eth.Utils as U
import Json.Decode as Decode exposing (Decoder, succeed)
import Json.Decode.Pipeline exposing (custom)



{-

   This file was generated by https://github.com/cmditch/elm-ethereum-generator v4.0.0
   Compatible with elm-ethereum v4.0.0

-}
-- approve(address,uint256) function


approve : Address -> Address -> BigInt -> Call ()
approve contractAddress to_ tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "095ea7b3" [ E.address to_, E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


-- balanceOf(address) function


balanceOf : Address -> Address -> Call BigInt
balanceOf contractAddress owner_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "70a08231" [ E.address owner_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }


-- getApproved(uint256) function


getApproved : Address -> BigInt -> Call Address
getApproved contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "081812fc" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }


-- isApprovedForAll(address,address) function


isApprovedForAll : Address -> Address -> Address -> Call Bool
isApprovedForAll contractAddress owner_ operator_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "e985e9c5" [ E.address owner_, E.address operator_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.bool
    }


-- mint(uint256) function


mint : Address -> BigInt -> Call ()
mint contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "a0712d68" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


-- name() function


name : Address -> Call String
name contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "06fdde03" []
    , nonce = Nothing
    , decoder = toElmDecoder D.string
    }


-- ownerOf(uint256) function


ownerOf : Address -> BigInt -> Call Address
ownerOf contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "6352211e" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }


-- safeTransferFrom(address,address,uint256) function


safeTransferFrom : Address -> Address -> Address -> BigInt -> Call ()
safeTransferFrom contractAddress from_ to_ tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "42842e0e" [ E.address from_, E.address to_, E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


-- safeTransferFromWithData(address,address,uint256,bytes) function


safeTransferFromWithData : Address -> Address -> Address -> BigInt -> Hex -> Call ()
safeTransferFromWithData contractAddress from_ to_ tokenId_ data_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "b88d4fde" [ E.address from_, E.address to_, E.uint tokenId_, E.bytes data_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


-- setApprovalForAll(address,bool) function


setApprovalForAll : Address -> Address -> Bool -> Call ()
setApprovalForAll contractAddress operator_ approved_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "a22cb465" [ E.address operator_, E.bool approved_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


-- supportsInterface(bytes4) function


supportsInterface : Address -> Hex -> Call Bool
supportsInterface contractAddress interfaceId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "01ffc9a7" [ (E.staticBytes 4) interfaceId_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.bool
    }


-- symbol() function


symbol : Address -> Call String
symbol contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "95d89b41" []
    , nonce = Nothing
    , decoder = toElmDecoder D.string
    }


-- tokenURI(uint256) function


tokenURI : Address -> BigInt -> Call String
tokenURI contractAddress tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "c87b56dd" [ E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.string
    }


-- transferFrom(address,address,uint256) function


transferFrom : Address -> Address -> Address -> BigInt -> Call ()
transferFrom contractAddress from_ to_ tokenId_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "23b872dd" [ E.address from_, E.address to_, E.uint tokenId_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


-- Approval(address,address,uint256) event


type alias Approval =
    { owner : Address
    , approved : Address
    , tokenId : BigInt
    }


approvalEvent : Address -> Maybe Address -> Maybe Address -> Maybe BigInt -> LogFilter
approvalEvent contractAddress owner_ approved_ tokenId_ = 
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = 
        [ Just <| U.unsafeToHex "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925"
        , Maybe.map (abiEncode << E.address) owner_
        , Maybe.map (abiEncode << E.address) approved_
        , Maybe.map (abiEncode << E.uint) tokenId_
        ]
    }


approvalDecoder : Decoder Approval
approvalDecoder = 
    Decode.succeed Approval
        |> custom (topic 1 D.address)
        |> custom (topic 2 D.address)
        |> custom (topic 3 D.uint)


-- ApprovalForAll(address,address,bool) event


type alias ApprovalForAll =
    { owner : Address
    , operator : Address
    , approved : Bool
    }


approvalForAllEvent : Address -> Maybe Address -> Maybe Address -> LogFilter
approvalForAllEvent contractAddress owner_ operator_ = 
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = 
        [ Just <| U.unsafeToHex "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31"
        , Maybe.map (abiEncode << E.address) owner_
        , Maybe.map (abiEncode << E.address) operator_
        ]
    }


approvalForAllDecoder : Decoder ApprovalForAll
approvalForAllDecoder = 
    Decode.succeed ApprovalForAll
        |> custom (topic 1 D.address)
        |> custom (topic 2 D.address)
        |> custom (data 0 D.bool)


-- Transfer(address,address,uint256) event


type alias Transfer =
    { from : Address
    , to : Address
    , tokenId : BigInt
    }


transferEvent : Address -> Maybe Address -> Maybe Address -> Maybe BigInt -> LogFilter
transferEvent contractAddress from_ to_ tokenId_ = 
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = 
        [ Just <| U.unsafeToHex "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
        , Maybe.map (abiEncode << E.address) from_
        , Maybe.map (abiEncode << E.address) to_
        , Maybe.map (abiEncode << E.uint) tokenId_
        ]
    }


transferDecoder : Decoder Transfer
transferDecoder = 
    Decode.succeed Transfer
        |> custom (topic 1 D.address)
        |> custom (topic 2 D.address)
        |> custom (topic 3 D.uint)


